name: CI

on:
  push:
    branches:
      - master
      - ci

  pull_request:
    branches:
      - master

  repository_dispatch:
    types: [qaterial-update]

jobs:
  BuildAppImage:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: "Configure"
      run: mkdir -p build && docker run --rm -v $(pwd):/src/ --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined reivilo1234/qt-linux-cmake:qt5.15.1-gcc7 cmake -B ./build/ -S . -DQATERIALGALLERY_IGNORE_ENV=ON

    - name: "Build QaterialGallery"
      run: docker run --rm -v $(pwd):/src/ --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined reivilo1234/qt-linux-cmake:qt5.15.1-gcc7 cmake --build build --target "QaterialGallery" --config "Release" -j $(nproc)

    - name: "Deploy QaterialGallery AppImage"
      run: docker run --rm -v $(pwd):/src/ --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined reivilo1234/qt-linux-cmake:qt5.15.1-gcc7 cmake --build build --target "QaterialGalleryAppImage" --config "Release" -j $(nproc)

    - name: Upload QaterialGallery AppImage
      uses: actions/upload-artifact@v2
      with:
        name: QaterialGallery.AppImage
        path: build/*.AppImage

  BuildApk:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: ['armeabi-v7a', 'arm64-v8a', 'x86_64']
        api: ['30']
        # 24 : Android 7.1, 26: Android 8, 28: Android 9, 29: Android 10
        target-api: ['24', '26', '28', '29']
        ndk: ['28.0.3']
        version: ['5.15.1']
        build-type: ['Release']

    steps:
    - uses: actions/checkout@v2

    - name: "Configure"
      run: mkdir -p build && docker run --rm -v $(pwd):/src/ reivilo1234/qt-android-cmake:qt${{ matrix.version }}-api${{ matrix.api }}-ndk${{ matrix.ndk }} cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE=/opt/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.abi }} -DANDROID_NATIVE_API_LEVEL=${{ matrix.target-api }} -DANDROID_STL=c++_shared -DANDROID_TOOLCHAIN=clang -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -B ./build/ -S .

    - name: "Build QaterialGallery"
      run: docker run --rm -v $(pwd):/src/ reivilo1234/qt-android-cmake:qt${{ matrix.version }}-api${{ matrix.api }}-ndk${{ matrix.ndk }} cmake --build build --target QaterialGallery -j

    - name: "Deploy QaterialGallery Apk"
      run: docker run --rm -v $(pwd):/src/ reivilo1234/qt-android-cmake:qt${{ matrix.version }}-api${{ matrix.api }}-ndk${{ matrix.ndk }} cmake --build build --target QaterialGalleryApk -j

    - name: Upload QaterialGallery Apk
      uses: actions/upload-artifact@v2
      with:
        name: QaterialGallery-${{ matrix.abi }}-${{ matrix.target-api }}.apk
        path: build/QaterialGallery-${{ matrix.abi }}/build/outputs/apk/debug/*.apk

  BuildWindows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest]
        version: ['5.15.1']
        build-type: ['Release']
    steps:
      - uses: actions/checkout@v2

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
          key: ${{ runner.os }}-QtCache-${{ matrix.version }}-modules

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.version }}
          dir: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Delete Qt built-in styles
        run: |
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/designer
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Fusion
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Imagine
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Universal
        shell: bash

      - name: Configure
        run: |
          mkdir -p build
          cmake -DQATERIALGALLERY_IGNORE_ENV=ON -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}" -B build -S .
        shell: bash

      - name: Build Qaterial
        run: cmake --build build --target "Qaterial" --config "${{ matrix.build-type }}" -j

      - name: Build QaterialGallery
        run: cmake --build build --target "QaterialGallery" --config "${{ matrix.build-type }}" -j

      - name: Build QaterialGallery Installer
        run: cmake --build build --target "QaterialGalleryInstallerX64" --config "${{ matrix.build-type }}" -j
        if: contains(matrix.os, 'windows')

      - name: Upload QaterialGallery Installer
        uses: actions/upload-artifact@v2
        with:
          name: Qaterial Gallery Installer Windows (${{ matrix.version }})
          path: build/QaterialGalleryInstaller*.exe
        if: contains(matrix.os, 'windows')

  BuildWasm:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: "Configure"
      run: mkdir -p build && docker run --rm -v $(pwd):/src/ -u $(id -u):$(id -g) reivilo1234/qt-webassembly-cmake:qt5.15-em1.39.10 cmake -B ./build/ -S . ..
    - name: "Build"
      run: docker run --rm -v $(pwd):/src/ -u $(id -u):$(id -g) reivilo1234/qt-webassembly-cmake:qt5.15-em1.39.10 make -C build -j
    - name: "Deploy to Github Pages"
      run: |
        mkdir -p build/deploy
        mv platforms/html/index.html build/deploy/index.html
        mv build/qtloader.js build/deploy/qtloader.js
        mv build/QaterialGallery.js build/deploy/QaterialGallery.js
        mv build/qtlogo.svg build/deploy/qtlogo.svg
        mv build/QaterialGallery.wasm build/deploy/QaterialGallery.wasm
        mv platforms/html/icon.png build/deploy/icon.png
        cd build/deploy
        git init
        git add .
        git -c user.name='ci' -c user.email='ci' commit -m init
        git push -f -q https://git:${{ secrets.github_token }}@github.com/${{ github.repository }} HEAD:gh-pages
      if: (github.event_name == 'repository_dispatch') || (github.event_name == 'push' && github.ref == 'refs/heads/master')