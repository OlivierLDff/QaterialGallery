name: üë∑ CI/CD

on:
  push:
    branches:
      - master
      - ci

  release:
    types:
      - created

  pull_request:
    branches:
      - master

  repository_dispatch:
    types: [qaterial-update]

jobs:
  BuildAppImage:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: üîß Configure
      run: mkdir -p build && docker run --rm -v $(pwd):/src/ --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined reivilo1234/qt-linux-cmake:qt5.15.1-gcc7 cmake -B ./build/ -S . -DQATERIALGALLERY_IGNORE_ENV=ON

    - name: üî® Build QaterialGallery
      run: docker run --rm -v $(pwd):/src/ --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined reivilo1234/qt-linux-cmake:qt5.15.1-gcc7 cmake --build build --target "QaterialGallery" --config "Release" -j $(nproc)

    - name: üöÄ Deploy QaterialGallery AppImage
      run: docker run --rm -v $(pwd):/src/ --device /dev/fuse --cap-add SYS_ADMIN --security-opt apparmor:unconfined reivilo1234/qt-linux-cmake:qt5.15.1-gcc7 cmake --build build --target "QaterialGalleryAppImage" --config "Release" -j $(nproc)

    - name: Get Name of Artifact
      run: |
        ARTIFACT_PATHNAME=$(ls build/*.AppImage | head -n 1)
        ARTIFACT_NAME=$(basename $ARTIFACT_PATHNAME)
        echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
        echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV

    - name: üì¶ Upload QaterialGallery AppImage
      uses: actions/upload-artifact@v2
      with:
        name: QaterialGallery.AppImage
        path: ${{ env.ARTIFACT_PATHNAME }}

    - name: üöÄ Upload Release Asset
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.ARTIFACT_PATHNAME }}
        asset_name: QaterialGallery.AppImage
        asset_content_type: application/vnd.appimage

  BuildApk:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: ['armeabi-v7a', 'arm64-v8a', 'x86_64']
        # 24 : Android 7.1, 26: Android 8, 28: Android 9, 29: Android 10
        target-api: ['29']
        build-tools: ['30.0.2']
        version: ['5.15.1']
        build-type: ['Release']

    steps:
    - uses: actions/checkout@v2
    - uses: seanmiddleditch/gha-setup-ninja@master

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
        key: ${{ runner.os }}-QtCache-${{ matrix.version }}-android

    - name: ‚¨ÜÔ∏è Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.version }}
        target: android
        dir: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: üî• Delete Qt built-in styles
      run: |
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/designer
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Fusion
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Imagine
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Universal
      shell: bash

    - name: "Create signingKey.jks"
      run: |
        mkdir -p build
        echo ${{ secrets.ANDROID_SIGNING_KEY }} > build/signingKeyBase64.txt
        base64 -d build/signingKeyBase64.txt > build/signingKey.jks

    - name: üîß Configure
      run: |
        export JAVA_HOME=$JAVA_HOME_8_X64
        export ANDROID_SDK=$ANDROID_SDK_ROOT
        export ANDROID_NDK=$ANDROID_SDK/ndk-bundle
        echo $ANDROID_SDK
        echo $ANDROID_NDK
        echo $JAVA_HOME
        mkdir -p build
        cmake \
          -G "Ninja" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.abi }} \
          -DANDROID_NATIVE_API_LEVEL=${{ matrix.target-api }} \
          -DANDROID_STL=c++_shared \
          -DANDROID_TOOLCHAIN=clang \
          -DANDROID_BUILDTOOLS_REVISION=${{ matrix.build-tools }} \
          -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=BOTH \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -B ./build/ -S . \
          -DQATERIALGALLERY_ANDROID_KEYSTORE=$(pwd)/build/signingKey.jks \
          -DQATERIALGALLERY_ANDROID_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }} \
          -DQATERIALGALLERY_ANDROID_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEY_STORE_PASSWORD }} \
          -DQATERIALGALLERY_ANDROID_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}

    - name: üî® Build QaterialGallery
      run: cmake --build build --target QaterialGallery -j

    - name: üöÄ Deploy QaterialGallery Apk
      run: cmake --build build --target QaterialGalleryApk -j

    - name: üì¶ Upload QaterialGallery Apk
      uses: actions/upload-artifact@v2
      with:
        name: QaterialGallery-${{ matrix.abi }}-${{ matrix.target-api }}.apk
        path: build/QaterialGallery-${{ matrix.abi }}/build/outputs/apk/release/QaterialGallery-${{matrix.abi}}-release-signed.apk

    - name: üöÄ Upload Release Asset
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/QaterialGallery-${{ matrix.abi }}/build/outputs/apk/release/QaterialGallery-${{matrix.abi}}-release-signed.apk
        asset_name: QaterialGallery-${{ matrix.abi }}-${{ matrix.target-api }}.apk
        asset_content_type: application/zip

  BuildIpa:

    runs-on: macOS-latest
    strategy:
      matrix:
        deployment-target: ['12.0']
        platform: ['OS64COMBINED']
        version: ['5.15.1']
        build-type: ['Release']
        bitcode: ['FALSE']

    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: OlivierLDff/IosCMakeToolchain
        path: ios-toolchain

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
        key: ${{ runner.os }}-QtCache-${{ matrix.version }}-ios

    - name: ‚¨ÜÔ∏è Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.version }}
        target: ios
        dir: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: üî• Delete Qt built-in styles
      run: |
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/designer
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Fusion
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Imagine
        rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Universal
      shell: bash

    - uses: OlivierLDff/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.IOS_CERTIFICATES_FILE_BASE64 }}
        p12-password: ${{ secrets.IOS_CERTIFICATES_PASSWORD }}

    - uses: OlivierLDff/download-provisioning-profiles@v1
      with:
        bundle-id: com.qaterial.gallery
        issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

    - name: üîß Configure
      run: |
        mkdir -p build
        cmake \
          -G "Xcode" \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/ios-toolchain/ios.toolchain.cmake \
          -DCMAKE_CONFIGURATION_TYPES="Release" \
          -DDEPLOYMENT_TARGET=${{ matrix.deployment-target }} \
          -DPLATFORM=${{ matrix.platform }} \
          -DENABLE_VISIBILITY=FALSE \
          -DENABLE_BITCODE=${{ matrix.bitcode }} \
          -DENABLE_ARC=TRUE \
          -DQT_IOS_TEAM_ID=${{ secrets.IOS_TEAM_ID }} \
          -DQT_IOS_CODE_SIGN_IDENTITY=${{ secrets.IOS_CODE_SIGN_IDENTITY }} \
          -DQT_IOS_PROVISIONING_PROFILE_SPECIFIER=${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }} \
          -B ./build/ -S .

    - name: üî® Build QaterialGallery
      run: cmake --build build --target QaterialGallery --config "${{ matrix.build-type }}" -j8

    - name: üî® Build QaterialGallery Archive
      run: cmake --build build --target QaterialGalleryArchive --config "${{ matrix.build-type }}" -j8

    - name: üöÄ Deploy QaterialGallery Ipa
      run: cmake --build build --target QaterialGalleryIpa --config "${{ matrix.build-type }}" -j8

    - name: üì¶ Upload QaterialGallery App
      uses: actions/upload-artifact@v2
      with:
        name: QaterialGallery-${{ matrix.platform }}-${{ matrix.deployment-target }}.app
        path: build/${{ matrix.build-type }}-iphoneos/QaterialGallery.app

    - name: üì¶ Upload QaterialGallery Ipa
      uses: actions/upload-artifact@v2
      with:
        name: QaterialGallery-i${{ matrix.platform }}-${{ matrix.deployment-target }}.ipa
        path: build/QaterialGalleryIpa/Qaterial.ipa

    - uses: OlivierLDff/upload-testflight-build@v1
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      name: üöÄ Release to TestFlight
      with:
        app-path: build/QaterialGalleryIpa/Qaterial.ipa
        issuer-id: ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.IOS_APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.IOS_APPSTORE_PRIVATE_KEY }}

    - name: üöÄ Upload Release Asset
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/QaterialGalleryIpa/Qaterial.ipa
        asset_name: QaterialGallery-i${{ matrix.platform }}-${{ matrix.deployment-target }}.ipa
        asset_content_type: application/zip

  BuildWindows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        version: ['5.15.1']
        build-type: ['Release']
    steps:
      - uses: actions/checkout@v2

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
          key: ${{ runner.os }}-QtCache-${{ matrix.version }}-modules

      - name: ‚¨ÜÔ∏è Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.version }}
          dir: ${{ github.workspace }}/Qt-${{ runner.os }}-${{ matrix.version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: üî• Delete Qt built-in styles
        run: |
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/designer
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Fusion
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Imagine
          rm -rf ${Qt5_Dir}/qml/QtQuick/Controls.2/Universal
        shell: bash

      - name: üîß Configure
        run: |
          mkdir -p build
          cmake -DQATERIALGALLERY_IGNORE_ENV=ON -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}" -B build -S .
        shell: bash

      - name: üî® Build Qaterial
        run: cmake --build build --target "Qaterial" --config "${{ matrix.build-type }}" -j

      - name: üî® Build QaterialGallery
        run: cmake --build build --target "QaterialGallery" --config "${{ matrix.build-type }}" -j

      - name: üî® Build QaterialGallery Installer
        run: cmake --build build --target "QaterialGalleryInstallerX64" --config "${{ matrix.build-type }}" -j

      - name: üì¶ Upload QaterialGallery Installer
        uses: actions/upload-artifact@v2
        with:
          name: QaterialGalleryInstallerX64${{ matrix.build-type }}.exe
          path: build/QaterialGalleryInstallerX64${{ matrix.build-type }}.exe

      - name: üöÄ Upload Release Asset
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/QaterialGalleryInstallerX64${{ matrix.build-type }}.exe
          asset_name: QaterialGalleryInstallerX64${{ matrix.build-type }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  BuildWasm:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: üîß Configure
      run: mkdir -p build && docker run --rm -v $(pwd):/src/ -u $(id -u):$(id -g) reivilo1234/qt-webassembly-cmake:qt5.15-em1.39.10 cmake -B ./build/ -S . ..
    - name: üî® Build
      run: docker run --rm -v $(pwd):/src/ -u $(id -u):$(id -g) reivilo1234/qt-webassembly-cmake:qt5.15-em1.39.10 make -C build -j
    - name: üöÄ Deploy to Github Pages
      run: |
        mkdir -p build/deploy
        mv platforms/html/index.html build/deploy/index.html
        mv build/qtloader.js build/deploy/qtloader.js
        mv build/QaterialGallery.js build/deploy/QaterialGallery.js
        mv build/qtlogo.svg build/deploy/qtlogo.svg
        mv build/QaterialGallery.wasm build/deploy/QaterialGallery.wasm
        mv platforms/html/icon.png build/deploy/icon.png
        cd build/deploy
        git init
        git add .
        git -c user.name='ci' -c user.email='ci' commit -m init
        git push -f -q https://git:${{ secrets.github_token }}@github.com/${{ github.repository }} HEAD:gh-pages
      if: (github.event_name == 'repository_dispatch') || (github.event_name == 'push' && github.ref == 'refs/heads/master')
